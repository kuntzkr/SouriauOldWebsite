module.exports = function(grunt) {

  // Time how long tasks take. Can help when optimizing build times.
  require('time-grunt')(grunt);

  // Automatically load required grunt tasks.
  require('jit-grunt')(grunt, {
    useminPrepare: 'grunt-usemin',
    sprite: 'grunt-spritesmith'
  });

  // Configurable.
  var config = {

  }

  // Project configuration.
  grunt.initConfig({

    // Config.
    config: config,

    // Copies remaining files to places other tasks can use.
    copy: {
      dev: {
        files: [
          {
            expand: true,
            cwd: 'bower_components/bootstrap-sass/assets/fonts/',
            src: '**',
            dest: 'css/fonts/'
          },
          {
            src: 'bower_components/jquery/jquery.min.js',
            dest: 'js/jquery.js'
          },
          {
            src: 'bower_components/jquery/jquery.min.map.js',
            dest: 'js/jquery.js'
          },
          {
            src: 'bower_components/jquery-once/jquery.once.js',
            dest: 'js/jquery.once.js'
          },
          {
            src: 'bower_components/slick-carousel/slick/ajax-loader.gif',
            dest: 'images/slick/ajax-loader.gif'
          },
          {
            expand: true,
            cwd: 'bower_components/slick-carousel/slick/fonts',
            src: '**',
            dest: 'css/fonts/slick'
          },
          {
            src: 'bower_components/jcf/js/jcf.select.js',
            dest: 'js/jcf.select.js'
          }
        ]
      }
    },

    // Concatinate JS and CSS bower components.
    bower_concat: {
      all: {
        dest: 'js/vendor.js',
        cssDest: 'css/vendor.css',
        exclude: ['jquery', 'jquery-once'],
        mainFiles: {
          'slick-carousel': [
            'slick/slick.js',
            'slick/slick.scss',
            'slick/slick-theme.scss',
            'slick/fonts/*'
          ]
        }
      }
    },

    // Automatically inject Bower components into the php and scss files.
    wiredep: {
      templates: {
        src: ['**/*.php'],
        ignorePath: /^(\.\.\/)*\.\./
      },
      sass: {
        src: ['scss/**/*.scss'],
        ignorePath: /^(\.\.\/)+/
      }
    },

    // Create sprite.
    sprite: {
      dev: {
        src: 'images/spritesrc/*.png',
        dest: 'images/spritesheet.png',
        imgPath: '../<%= sprite.dev.dest %>',
        retinaSrcFilter: 'images/spritesrc/*@2x.png',
        retinaDest: 'images/spritesheet@2x.png',
        retinaImgPath: '../<%= sprite.dev.retinaDest %>',
        destCss: 'scss/partials/_sprites.scss',
        padding: 2
      }
    },

    // Optimize sprite.
    imagemin: {
      dev: {
        files: [{
          expand: true,
          cwd: 'images/',
          src: ['spritesheet.png', 'spritesheet@2x.png'],
          dest: 'images/'
        }]
      }
    },

    // Compiles Sass to CSS and generates necessary files if requested.
    sass: {
      dev: {
        options: {
          sourceMap: false,
          imagePath: '../images',
          includePaths: require('node-bourbon').includePaths
        },
        files: {
          'css/screen.css': 'scss/screen.scss'
        }
      }
    },

    sass_globbing: {
      your_target: {
        files: {
          'scss/partials/_blocks.scss': 'scss/partials/blocks/*.scss'
        },
        options: {
          useSingleQuotes: false,
          signature: '// This file is generated by a \'grunt-sass-globbing\' plugin. Please, do NOT edit it!'
        }
      }
    },

    // Generate Modernizr
    modernizr: {
      dev: {
        'crawl': false,
        'parseFiles': false,
        'customTests': [],
        'dest': './js/modernizr.js',
        'tests': grunt.file.readJSON('./modernizr-tests.json', 'utf8').tests,
        'options': [
          'domPrefixes',
          'prefixes',
          'addTest',
          'atRule',
          'hasEvent',
          'mq',
          'prefixed',
          'prefixedCSS',
          'prefixedCSSValue',
          'testAllProps',
          'testProp',
          'testStyles',
          'setClasses'
        ],
        'uglify': false
      }
    },

    svgstore: {
      options: {
        prefix : 'ico-',
        svg: {
          style: 'display: none;'
        }
      },
      dist: {
        files:{
          'inc/svg.php': ['svg/*.svg']
        }
      }
    },

    includes: {
      files: {
        src: 'svg/svg.js',
        dest: 'js'
      }
    },

    // Watches files for changes and runs tasks based on the changed files.
    watch: {
      sass: {
        files: ['scss/**/*.scss'],
        tasks: ['buildCSS']
      },
      bower: {
        files: ['bower.json'],
        tasks: ['copy', 'wiredep', 'bower_concat']
      },
      sprite: {
        files: ['images/spritesrc/**/*.png'],
        tasks: ['createSprite']
      },
      gruntfile: {
        files: ['Gruntfile.js']
      },
      modernizr: {
        files: ['modernizr-tests.json'],
        tasks: ['buildModernizr']
      },
      svgIcons: {
        files: ["svg/*.svg"],
        tasks: ['svgstore']
      },
      includes: {
        files: 'inc/svg.php',
        tasks: 'includes'
      }
    },

    // Server for php files.
    php: {
      dev: {
        options: {
          hostname: '127.0.0.1',
          port: 9000,
          base: '.',
          silent: true
        }
      }
    },

    // Browser sync task watch files and syncronize all connected browsers.
    browserSync: {
      dev: {
        options: {
          notify: false,
          proxy: '<%= php.dev.options.hostname %>:<%= php.dev.options.port %>', //PHP server.
          open: true,
          watchTask: true,
          files: [
            'css/**/*.css',
            'js/**/*.js',
            './**/*.php',
            'images/**/*.*'
          ]
        }
      }
    }

  });

  // Force load tasks which can not be loaded by 'jit-grunt' plugin.
  grunt.loadNpmTasks('grunt-notify');

  grunt.loadNpmTasks('grunt-svgstore');

  grunt.loadNpmTasks('grunt-includes');

  // Register tasks for future use.
  grunt.registerTask('createSprite', ['sprite', 'imagemin']);

  grunt.registerTask('buildCSS', ['sass_globbing', 'sass']);
  grunt.registerTask('buildModernizr', ['modernizr']); 

  // Register defult task.
  grunt.registerTask('default', ['copy', 'wiredep', 'bower_concat', 'createSprite', 'buildCSS', 'buildModernizr', 'php', 'browserSync', 'svgstore', 'includes', 'watch']);
};
