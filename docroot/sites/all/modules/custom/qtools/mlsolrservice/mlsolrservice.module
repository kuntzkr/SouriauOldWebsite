<?php
/**
 * @file
 * This is direct search_api_solr clone that allow us to make some custom tricks
 * without modifying original module.
 */

/**
 * Implements hook_search_api_service_info().
 */
function mlsolrservice_search_api_service_info() {
  $services['mlsolrservice_service'] = array(
    'name' => t('Multilingual Solr service'),
    'description' => t('<p>Index items using an Apache Solr search server (Multilingual).</p>'),
    'class' => 'MLSearchApiSolrService',
  );
  return $services;
}

/**
 * Implements hook_help().
 */
function mlsolrservice_help($path, array $arg = array()) {
  if ($path == 'admin/config/search/search_api') {
    // Included because we need the REQUIREMENT_* constants.
    include_once(DRUPAL_ROOT . '/includes/install.inc');
    module_load_include('install', 'mlsolrservice');
    $reqs = mlsolrservice_requirements('runtime');
    foreach ($reqs as $req) {
      if (isset($req['description'])) {
        $type = $req['severity'] == REQUIREMENT_ERROR ? 'error' : ($req['severity'] == REQUIREMENT_WARNING ? 'warning' : 'status');
        drupal_set_message($req['description'], $type);
      }
    }
  }
  elseif ($path == 'admin/config/search/search_api/server/%' && !empty($arg[5])) {
    $server = search_api_server_load($arg[5]);
    if ($server && $server->enabled && $server->class == 'mlsolrservice_service') {
      $ping = $server->ping();
      $type = $ping ? 'status' : 'error';
      if ($ping) {
        $msg = t('ML SAPI SolrService: The Solr server could be reached (latency: @millisecs ms).', array('@millisecs' => $ping * 1000));
      }
      else {
        $msg = t('ML SAPI SolrService: The Solr server could not be reached.');
      }
      drupal_set_message($msg, $type);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Used to execute an optimization operation on all enabled Solr servers once a
 * day.
 */
function mlsolrservice_cron() {
  if (REQUEST_TIME - variable_get('search_api_solr_last_optimize', 0) > 86400) {
    variable_set('search_api_solr_last_optimize', REQUEST_TIME);
    $conditions = array('class' => 'mlsolrservice_service', 'enabled' => TRUE);
    foreach (search_api_server_load_multiple(FALSE, $conditions) as $server) {
      $server->getSolrConnection()->optimize(FALSE, FALSE);
    }
  }
}