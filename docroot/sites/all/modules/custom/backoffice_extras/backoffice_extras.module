<?php

/**
 * @file
 * BackOffice Extras.
 */

define('BACKOFFICE_EXTRAS_CONTENT_PUBLISH_TIME', 200);

/**
 * Implements hook_menu_alter().
 */
function backoffice_extras_menu_alter(&$items) {
  $items['import']['theme callback'] = 'backoffice_extras_import_theme_callback';
  $items['admin/commerce/products/import'] = $items['import'];
  $items['admin/commerce/products/import']['type'] = MENU_LOCAL_TASK;

  $items['admin/structure/domain']['title'] = t('Countries');
  $items['admin/structure/domain/view']['title'] = t('Country list');
  $items['admin/structure/domain/create']['title'] = t('Add Country');

  $items['admin/config/regional/language/add']['title'] = t('Add language');
  $items['admin/config/regional/language/add']['page callback'] = 'drupal_get_form';
  $items['admin/config/regional/language/add']['page arguments'] = array('locale_languages_custom_form');

  $items['admin/config/regional/translate/update']['access arguments'] = array('administer site configuration');
  $items['admin/config/regional/translate/extract']['access arguments'] = array('administer site configuration');
  $items['admin/config/regional/translate/translate']['page callback'] = 'backoffice_extras_translate_seek_screen';

  // Block access to create content if not central domain.
  $items['node/add']['access callback'] = '_backoffice_extras_node_add_access';
  foreach (node_type_get_types() as $type) {
    $items['node/add/' . $type->type]['access callback'] = '_backoffice_extras_node_add_access';

  }
  $items['admin/commerce/products/add']['access callback'] = '_backoffice_extras_commerce_add_access';

  unset($items['node']);

  $items['user/reset/%/%/%'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backoffice_extras_user_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function backoffice_extras_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($router_item['path']) {
    case 'admin/config/regional/translate':
    case 'admin/config/regional/translate/translate':
    case 'admin/config/regional/translate/import':
    case 'admin/config/regional/translate/export':
      $data['tabs'] = array();
      break;

    default:
      break;
  }
}

/**
 * Set Admin theme for "feeds import" pages.
 */
function backoffice_extras_import_theme_callback() {
  return variable_get('admin_theme', 0);
}

/**
 * Implements hook_form_alter().
 */
function backoffice_extras_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    _backoffice_extras_node_edit_form_alter($form, $form_state);
  }

  // Save and publish for taxonomy terms.
  if (!empty($form['#entity_type']) && ($form['#entity_type'] == 'taxonomy_term')) {
    _backoffice_extras_taxonomy_term_edit_form($form, $form_state);
  }

  // Save and publish for commerce_products.
  if (!empty($form['#entity_type']) && ($form['#entity_type'] == 'commerce_product')) {
    $entity_type = 'commerce product';
    if (empty($form['actions']['save_and_publish']) && (user_access('translate any entity') || user_access("translate $entity_type entities"))) {
      if (entity_translation_entity_form_get_handler($form, $form_state)) {
        $label = t('Save and publish', array(), array('context' => DRAFT_MODERATION_T_CONTEXT));
        $form['actions']['save_and_publish'] = array(
          '#type' => 'submit',
          '#value' => $label,
          '#weight' => 10,
          '#submit' => array('backoffice_extras_save_and_publish_commerce_product_submit'),
        );
      }
    }
  }
}

/**
 * Decorates Node edit form.
 */
function _backoffice_extras_node_edit_form_alter(&$form, &$form_state) {
  global $user;

  $node = $form['#node'];
  $moderation_mode = draft_moderation_supported_type($node->type);
  $publish_access = draft_moderation_user_has_publish_access($moderation_mode, DRAFT_MODERATION_WORKFLOW_IN_PROGRESS, $node->type);

  // @Temporary hidden.
  unset($form['actions']['preview_changes']);
  unset($form['actions']['preview']);

  $entity_type = 'node';
  if (empty($form['actions']['save_and_publish']) && (user_access('translate any entity') || user_access("translate $entity_type entities"))) {
    if (entity_translation_node_supported_type($node->type) && $publish_access && entity_translation_entity_form_get_handler($form, $form_state)) {
      $label = t('Save and publish', array(), array('context' => DRAFT_MODERATION_T_CONTEXT));
      if (empty($form['clone_from_original_nid'])) {
        $form['actions']['save_and_publish'] = array(
          '#type' => 'submit',
          '#value' => $label,
          '#weight' => 10,
          '#submit' => array('backoffice_extras_save_and_publish_submit'),
        );
      }
      if (!empty($form['#node']->nid)) {
        $label = t('Save and unpublish', array(), array('context' => DRAFT_MODERATION_T_CONTEXT));
        $form['actions']['save_and_unpublish'] = array(
          '#type' => 'submit',
          '#value' => $label,
          '#weight' => 10,
          '#submit' => array('backoffice_extras_save_and_unpublish_submit'),
        );
      }
    }
  }

  if (isset($form['field_modification_type']['und']['#default_value']) && !empty($form['field_modification_type']['und']['#default_value'])) {
    $form['field_modification_type']['und']['#options'] = ['_none' => '- Select a value -'] + $form['field_modification_type']['und']['#options'];
    $form["field_modification_type"][LANGUAGE_NONE]['#default_value'] = '_none';
  }

  $lang = $form['language']['#default_value'];
  if (isset($form['field_log'][$lang][0]['value']['#default_value']) && !empty($form['field_log'][$lang][0]['value']['#default_value'])) {
    $form['field_log'][$lang][0]['value']['#default_value'] = NULL;
  }

  if (isset($form['actions']['save_and_publish']) && isset($form['clone_from_original_nid'])) {
    unset($form['actions']['save_and_publish']);
  }

  // Node singularity.
  $singularity_allowed = array(
    'applicationlanding',
    'capabilitieslanding',
    'productlanding',
    'homepage',
    'news_landing',
    'toolkitlanding',
  );
  if (in_array($node->type, $singularity_allowed)) {
    _backoffice_extras_node_form_validate_node_singularity($form);
  }

  // !user_access('edit core settings').
  if ($user->uid != 1) {
    // Hide all domain and publication options.
    if (isset($form['options'])) {
      $form['options']['#access'] = FALSE;
    }
    if (isset($form['domain'])) {
      $form['domain']['#access'] = FALSE;
    }
  }

}

/**
 * Adds Save and publish btn on Taxonomyterm edit form.
 */
function _backoffice_extras_taxonomy_term_edit_form(&$form, &$form_state) {
  $entity_type = 'taxonomy term';
  if (!empty($form['actions']['save_and_publish']) || !(user_access('translate any entity') || user_access("translate $entity_type entities"))) {
    // Nothing to do here.
    return;
  }

  if ($handler = entity_translation_entity_form_get_handler($form, $form_state)) {
    // Publish btn.
    $label = t('Save and publish', array(), array('context' => DRAFT_MODERATION_T_CONTEXT));
    $form['actions']['save_and_publish'] = array(
      '#type' => 'submit',
      '#value' => $label,
      '#weight' => 10,
      '#submit' => array('backoffice_extras_save_and_publish_taxonomy_submit'),
    );

    // If editing.
    if (!empty($form['#term']['tid'])) {
      // Unpublish btn.
      $lang = $handler->getFormLanguage();
      $translations = $handler->getTranslations();
      // Unpublish btn for translations only.
      if (!empty($translations) && ($translations->original != $lang)) {
        $label = t('Unpublish', array(), array('context' => DRAFT_MODERATION_T_CONTEXT));
        $form['actions']['unpublish'] = array(
          '#type' => 'submit',
          '#value' => $label,
          '#weight' => 10,
          '#submit' => array('backoffice_extras_unpublish_taxonomy_submit'),
        );
      }
    }
  }
}

/**
 * Node form submit callback for "Save and Publish translation".
 */
function backoffice_extras_save_and_publish_submit($form, $form_state) {
  $form_state['values']['translation']['status'] = 1;
  $form_state['values']['translation']['translate'] = 0;

  if (draft_moderation_supported_type($form['#bundle'], $form['#entity_type']) == DRAFT_MODERATION_DISABLED) {
    $form_state['values']['status'] = NODE_PUBLISHED;
  }

  node_form_submit($form, $form_state);

}

/**
 * Initiate all translations for node being edited in the $form.
 *
 * @deprecated
 */
function _backoffice_extras_initiate_all_translations_for_node($form, $form_state) {
  $node = $form_state['node'];

  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  if (!module_exists('entity_translation') || !entity_translation_enabled_bundle($entity_type, $bundle)) {
    return;
  }

  $handler = entity_translation_entity_form_get_handler($form, $form_state);
  $translations = $handler->getTranslations();
  $langcode = $handler->getFormLanguage();

  if (($translations->original == $langcode) && (count($translations->data) < 2)) {
    // Initiate translations.
    draft_moderation_translations_initiate($node, $entity_type, TRUE);
    // Save the initiated translations.
    // @important, don't save if no new translation was added.
    $translations = $handler->getTranslations();
    if (count($translations->data) >= 2) {
      entity_save($entity_type, $node);
    }
  }
}

/**
 * Node form submit callback for "Save and UnPublish translation".
 */
function backoffice_extras_save_and_unpublish_submit($form, $form_state) {
  $form_state['values']['translation']['status'] = 0;
  $form_state['values']['translation']['translate'] = 0;

  node_form_submit($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function backoffice_extras_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'form_alter':
      // Move our hook implementation to the end of the list.
      $group = $implementations['backoffice_extras'];
      unset($implementations['backoffice_extras']);
      $implementations['backoffice_extras'] = $group;
      break;

    default:
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Decorates Domain edit form.
 */
function backoffice_extras_form_domain_form_alter(&$form, $form_state) {
  if ($form['#domain']['domain_id'] === NULL) {
    drupal_set_title(t('Add Country'));
    $domain_id = 'NEW';
    $default_id = domain_default_id();

    if (module_exists('domain_locale') && drupal_multilingual()) {
      $languages = language_list();
      $form['languages'] = array(
        '#type' => 'item',
        '#tree' => TRUE,
        '#title' => t('Languages'),
      );
      foreach ($languages as $langcode => $language) {
        if (!$language->enabled) {
          continue;
        }
        $form['languages'][$langcode] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'country-lang',
            ),
          ),
          '#tree' => TRUE,
        );
        $label = $language->name;
        if (isset($language->source) && !empty($language->source) && isset($languages[$language->source])) {
          $label .= ' ' . t('(Source: @source_lang_name)', array('@source_lang_name' => $languages[$language->source]->name));
        }
        $form['languages'][$langcode]['status'] = array(
          '#type' => 'checkbox',
          '#return_value' => 1,
          '#title' => check_plain($label),
          '#tree' => TRUE,
          '#prefix' => '<div class="left">',
          '#suffix' => '</div>',
        );
        $form['languages'][$langcode]['language_default'] = array(
          '#type' => 'radio',
          '#name' => 'language_default',
          '#return_value' => $langcode,
          '#tree' => TRUE,
          '#title' => t('Default'),
          '#states' => array(
            'disabled' => array(
              ':input[name="languages[' . $langcode . '][status]"]' => array('checked' => FALSE),
            ),
          ),
        );
      }
      $form['#validate'][] = 'backoffice_extras_domain_form_valaidate';
    }
  }
  else {
    drupal_set_title(t('Edit !country', array('!country' => $form['#domain']['sitename'])));
    $domain_id = $form['domain_id']['#value'];
  }

  if (!user_access('edit core settings')) {
    $form['valid']['#access'] = FALSE;
    $form['scheme']['#access'] = FALSE;
    $form['weight']['#access'] = FALSE;
    $form['ignore']['#access'] = FALSE;
    $form['is_default']['#access'] = FALSE;
  }

  // Set submit button at the end and add custom handler.
  $form['submit']['#weight'] = 10;
  $form['#submit'][] = 'backoffice_extras_domain_conf_submit';

  $form['custom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
  );

  // Checkbox to mark site as Live.
  $form['custom']['display_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Display Name', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#description' => t('Display name of domain in the country switcher.', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#default_value' => domain_conf_variable_get($domain_id, 'backoffice_extras_display_name'),
  );

  $is_live = domain_conf_variable_get($domain_id, 'backoffice_extras_domain_is_live');
  $is_live = is_null($is_live) ? 1 : $is_live;
  $form['custom']['is_live'] = array(
    '#type' => 'checkbox',
    '#title' => t('Live', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#description' => t('Whether or not site should be available for users in Country Switcher.', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#default_value' => $is_live,
    '#return_value' => 1,
  );

  $display_domain = domain_conf_variable_get($domain_id, 'backoffice_extras_display_domain');
  $display_domain = is_null($is_live) ? 0 : $display_domain;
  $form['custom']['display_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not display in country switcher', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#description' => t('Should the country be shown in the Country Switcher.', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#default_value' => $display_domain,
    '#return_value' => 1,
  );

  // @see SOURIAU_user_get_SOURIAU_geo_settings() for details.
  $geo_countries = domain_conf_variable_get($domain_id, 'geo_countries');
  $form['custom']['geo_countries'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Select GEO Countries', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#options' => array('none' => '--None--') + country_get_list(),
    '#default_value' => (isset($geo_countries) ? $geo_countries : 'none'),
    '#description' => t("Visitors from selected countries will be suggested to this domain.", [], ['context' => SOURIAU_COMMON_T_ADMIN]),
  );

  // Request history access block setting.
  $form['custom']['access_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('History block.', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#description' => t('Display or not the "History access block" on edit accout page.', [], ['context' => SOURIAU_COMMON_T_ADMIN]),
    '#default_value' => domain_conf_variable_get($domain_id, 'backoffice_extras_history_access_block'),
    '#return_value' => 1,
  );

}

/**
 * Form validation handler.
 */
function backoffice_extras_domain_form_valaidate($form, &$form_state) {
  if (!isset($form_state['input']['language_default']) || empty($form_state['input']['language_default'])) {
    form_set_error('languages', t('Please choose a default language'));
  }
  else {
    $default = $form_state['input']['language_default'];
    foreach ($form_state['values']['languages'] as $langcode => $item) {
      if ($langcode == $default) {
        $form_state['values']['languages'][$langcode]['language_default'] = $langcode;
        $form_state['values']['language_default'] = $langcode;
      }
    }
  }
}

/**
 * Handling custom domain settings.
 */
function backoffice_extras_domain_conf_submit($form, &$form_state) {
  $values = $form_state['values'];
  $domain_id = $values['domain_id'];

  domain_conf_variable_set($domain_id, 'geo_countries', $values['geo_countries']);
  domain_conf_variable_set($domain_id, 'backoffice_extras_domain_is_live', $values['is_live']);
  domain_conf_variable_set($domain_id, 'backoffice_extras_history_access_block', $values['access_block']);
  domain_conf_variable_set($domain_id, 'backoffice_extras_display_name', $values['display_name']);
  domain_conf_variable_set($domain_id, 'backoffice_extras_display_domain', $values['display_domain']);

  if (!empty($values['source'])) {
    $source_id = $values['source'];
    $config_name = 'souriau_common_main_menu_form';
    domain_conf_variable_set($domain_id, $config_name, domain_conf_variable_get($source_id, $config_name));
  }

  if (isset($values['languages'])) {
    $params = array();
    $i = 0;
    foreach ($values['languages'] as $langcode => $vals) {
      if ($vals['status']) {
        $params[$langcode] = array(
          'language' => $langcode,
          'weight' => $i++,
        );
      }
    }
    domain_locale_insert_domain($domain_id, $params);
    domain_conf_variable_set($domain_id, 'language_default', $values['language_default']);
  }
}

/**
 * Implements hook_multilingual_settings_changed().
 */
function backoffice_extras_multilingual_settings_changed() {
  $domain_id = domain_default_id();

  $domain_languages = _domain_locale_get_domains_languages();
  if (!empty($domain_languages) && isset($domain_languages[$domain_id])) {
    $domain_languages = $domain_languages[$domain_id];
    if (is_array($domain_languages)) {
      foreach ($domain_languages as $lang => $weight) {
        domain_locale_delete_domain_language($domain_id, $lang);
      }
    }
  }

  $enabled_languages = db_query('SELECT language, weight FROM {languages} WHERE enabled=1');
  foreach ($enabled_languages as $lang) {
    // domain_locale_delete_domain_language($domain_id, $lang->language);
    // Setting must have at least language defined,
    // weight and default can have default values.
    if (isset($lang->language)) {
      $lang->domain_id = $domain_id;
      drupal_write_record('domain_locale', $lang);
    }
  }
}

/**
 * Altering domain locale settings form for disabling choosing default locale.
 */
function backoffice_extras_form_domain_locale_form_alter(&$form, $form_state) {
  if (domain_default_id() == $form['domain_id']['#value']) {
    foreach ($form['domain_language'] as $key => $lang) {
      if (isset($lang['site_default'])) {
        $form['domain_language'][$key]['enabled']['#disabled'] = TRUE;
        $form['domain_language'][$key]['weight']['#disabled'] = TRUE;
        $form['domain_language'][$key]['site_default']['#disabled'] = TRUE;
      }
    }
    $form['submit']['#disabled'] = TRUE;
  }
  // Hide all languages that are disabled in Central domain.
  $disabled_languages = variable_get('backoffice_extras_disabled_languages', array('en' => 'old-en'));
  if (count($disabled_languages)) {
    $form['domain_language'] = array_diff_key($form['domain_language'], $disabled_languages);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding Context filter to manual interface translation form.
 */
function backoffice_extras_form_locale_translation_filter_form_alter(&$form, $form_state) {
  $sql_query = db_select('locales_source', 's');
  $sql_query->fields('s', array('context'));
  $sql_query->distinct();
  $contexts = $sql_query->execute();

  $options = array();
  foreach ($contexts as $context) {
    if (!empty($context->context)) {
      $options[$context->context] = $context->context;
    }
  }

  $form['#submit'] = array('backoffice_extras_translation_filter_form_submit');
  $form['filters']['status']['context'] = array(
    '#title' => t('Context'),
    '#type' => 'select',
    '#empty_value' => '',
    '#empty_option' => t('Default context'),
    '#default_value' => '',
    '#size' => 0,
    '#options' => $options,
  );

  if (empty($_SESSION['locale_translation_filter']['group']) && isset($form_state['values']['op']) && $form_state['values']['op'] != t('Reset')) {
    $form['filters']['status']['group']['#default_value'] = 'frontend';
    $_SESSION['locale_translation_filter']['group'] = 'frontend';
  }

  if (!empty($_SESSION['locale_translation_filter']['context'])) {
    $form['filters']['status']['context']['#default_value'] = $_SESSION['locale_translation_filter']['context'];
  }
}

/**
 * Process result from locale translation filter form.
 */
function backoffice_extras_translation_filter_form_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  $filters = locale_translation_filters();
  $filters['context']['title'] = t('Context');
  switch ($op) {
    case t('Filter'):
      foreach ($filters as $name => $filter) {
        if (isset($form_state['values'][$name])) {
          $_SESSION['locale_translation_filter'][$name] = $form_state['values'][$name];
        }
      }
      break;

    case t('Reset'):
      $_SESSION['locale_translation_filter'] = array();
      break;

    default:
      break;

  }

  $form_state['redirect'] = 'admin/config/regional/translate/translate';
}

/**
 * Helper functions for translate_seek.
 */
function backoffice_extras_translate_seek_screen() {
  drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');

  $elements = drupal_get_form('locale_translation_filter_form');
  $output = drupal_render($elements);
  $output .= _backoffice_extras_translate_seek();
  return $output;
}

/**
 * Helper functions for translate_seek.
 */
function _backoffice_extras_translate_seek() {
  $output = '';

  // We have at least one criterion to match.
  if (!($query = _backoffice_extras_translate_seek_query())) {
    $query = array(
      'translation' => 'all',
      'group' => 'all',
      'language' => 'all',
      'string' => '',
      'context' => '',
    );
  }

  $sql_query = db_select('locales_source', 's');

  $limit_language = NULL;
  if ($query['language'] != 'en' && $query['language'] != 'all') {
    $sql_query->leftJoin('locales_target', 't', "t.lid = s.lid AND t.language = :langcode", array(':langcode' => $query['language']));
    $limit_language = $query['language'];
  }
  else {
    $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
  }

  $sql_query->fields('s', array(
    'source',
    'location',
    'context',
    'lid',
    'textgroup',
  ));
  $sql_query->fields('t', array('translation', 'language'));

  // Compute LIKE section.
  switch ($query['translation']) {
    case 'translated':
      $sql_query->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE');
      $sql_query->orderBy('t.translation', 'DESC');
      break;

    case 'untranslated':
      $sql_query->condition(db_and()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE')
        ->isNull('t.translation')
      );
      $sql_query->orderBy('s.source');
      break;

    case 'all':
    default:
      $condition = db_or()
        ->condition('s.source', '%' . db_like($query['string']) . '%', 'LIKE');
      if ($query['language'] != 'en') {
        // Only search in translations if the language is not forced to English.
        $condition->condition('t.translation', '%' . db_like($query['string']) . '%', 'LIKE');
      }
      $sql_query->condition($condition);
      break;

  }

  // Add a condition on the text group.
  if (!empty($query['group']) && $query['group'] != 'all') {
    $sql_query->condition('s.textgroup', $query['group']);
  }

  // Add a condition on the text context.
  if (!empty($query['context'])) {
    $sql_query->condition('s.context', $query['context']);
  }

  $sql_query = $sql_query->extend('PagerDefault')->limit(50);
  $locales = $sql_query->execute();

  $groups = module_invoke_all('locale', 'groups');
  $header = array(
    t('Text group'),
    t('String'),
    t('Context'),
    ($limit_language) ? t('Language') : t('Languages'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $strings = array();
  foreach ($locales as $locale) {
    if (!isset($strings[$locale->lid])) {
      $strings[$locale->lid] = array(
        'group' => $locale->textgroup,
        'languages' => array(),
        'location' => $locale->location,
        'source' => $locale->source,
        'context' => $locale->context,
      );
    }
    if (isset($locale->language)) {
      $strings[$locale->lid]['languages'][$locale->language] = $locale->translation;
    }
  }

  $rows = array();
  foreach ($strings as $lid => $string) {
    $rows[] = array(
      $groups[$string['group']],
      array(
        'data' => check_plain(truncate_utf8($string['source'], 150, FALSE, TRUE)) . '<br /><small>' . $string['location'] . '</small>',
      ),
      $string['context'],
      array(
        'data' => _locale_translate_language_list($string, $limit_language),
        'align' => 'center',
      ),
      array(
        'data' => l(t('edit'),
          "admin/config/regional/translate/edit/$lid",
          array('query' => drupal_get_destination())),
        'class' => array('nowrap'),
      ),
      array(
        'data' => l(t('delete'),
          "admin/config/regional/translate/delete/$lid",
          array('query' => drupal_get_destination())),
        'class' => array('nowrap'),
      ),
    );
  }

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No strings available.'),
  ));
  $output .= theme('pager');

  return $output;
}

/**
 * Helper function for translate_seek.
 */
function _backoffice_extras_translate_seek_query() {
  $query = &drupal_static(__FUNCTION__);
  if (!isset($query)) {
    $query = array();
    $fields = array('string', 'language', 'translation', 'group', 'context');
    foreach ($fields as $field) {
      if (isset($_SESSION['locale_translation_filter'][$field])) {
        $query[$field] = $_SESSION['locale_translation_filter'][$field];
      }
    }
  }
  return $query;
}

/**
 * Implements hook_admin_paths().
 *
 * @see hook_admin_paths()
 * @see hook_admin_paths_alter()
 */
function backoffice_extras_admin_paths() {
  $paths = array(
    'import' => TRUE,
    'import/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_filefield_paths_field_type_info().
 *
 * On behalf of image.module.
 */
function backoffice_extras_filefield_paths_field_type_info() {
  return array('imagefield_crop');
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function backoffice_extras_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if ($info['field_name'] == 'field_code_p') {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
        'callback' => 'text_feeds_set_target',
        'optional_unique' => TRUE,
        'unique_callbacks' => array('backoffice_extras_mapper_unique'),
      );
    }

    if ($info['type'] == 'entityreference' && $info['translatable']) {
      $languages = language_list('enabled');
      foreach ($languages[1] as $language_code => $language_info) {
        $targets[$name . ':etid:et:' . $language_code] = array(
          'name' => t('@label (Entity reference by Entity ID) [@lng]', [
            '@label' => $instance['label'],
            '@lng' => $language_info->name,
          ]),
          'description' => t('The field instance @label of @id matched by Entity ID. [@lng]', [
            '@label' => $instance['label'],
            '@id' => $name,
            '@lng' => $language_info->name,
          ]),
          'callback' => '_feeds_et_entityreference_feeds_set_target',
          'real_target' => $name,
        );
        $targets[$name . ':label:et:' . $language_code] = array(
          'name' => t('@label (Entity reference by Entity label) [@lng]', [
            '@label' => $instance['label'],
            '@lng' => $language_info->name,
          ]),
          'description' => t('The field instance @label of @id matched by Entity label. [@lng].', array(
            '@label' => $instance['label'],
            '@id' => $name,
            '@lng' => $language_info->name,
          )),
          'callback' => '_feeds_et_entityreference_feeds_set_target',
          'real_target' => $name,
        );
      }
    }

    if ($info['type'] == 'commerce_product_reference') {
      if (array_key_exists('product_id', $info['columns'])) {
        unset($targets[$name . ":sku"]);
        $targets[$name] = array(
          'name' => $instance['label'] . ': SKU',
          'callback' => 'commerce_product_reference_feeds_set_target',
          'description' => t('The SKU reference for the @name field. NOTE: the product entity needs to exist.', array('@name' => $instance['label'])),
          'real_target' => 'commerce-' . $name,
        );
      }
    }

  }
}

/**
 * Unique callback for feeds import.
 */
function backoffice_extras_mapper_unique(FeedsSource $source, $entity_type, $bundle, $target, array $values) {
  list($field_name, $column) = explode(':', $target . ':value');
  // Example for if the target is a field.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->fieldCondition($field_name, $column, $values)
    ->execute();

  if (!empty($result[$entity_type])) {
    return key($result[$entity_type]);
  }
}

/**
 * Helper function for feeds importer.
 */
function backoffice_extras_taxonomy_uuid_feeds_set_target($source, $entity, $target, $uuid) {
  if (empty($uuid)) {
    return;
  }

  if ($i = strpos($target, ':uuid')) {
    $tid = entity_get_id_by_uuid('taxonomy_term', array($uuid));

    if (!count($tid)) {
      watchdog('import', 'Recommendations importer: Term with UUID `!uuid` not found.', array(
        '!uuid',
        $uuid,
      ));
      return;
    }

    $real_target = substr($target, 0, $i);

    if (!isset($entity->$real_target) || !isset($entity->{$real_target}[LANGUAGE_NONE])) {
      $entity->$real_target = array(LANGUAGE_NONE => array());
    }

    $delta = count($entity->{$real_target}[LANGUAGE_NONE]);
    $entity->{$real_target}[LANGUAGE_NONE][$delta]['tid'] = $tid[$uuid];
  }
  else {
    taxonomy_feeds_set_target($source, $entity, $target, $uuid);
  }
}

/**
 * Helper function for feeds importer.
 *
 * Used for field with type jquery_colorpicker.
 */
function backoffice_extras_jquery_colorpicker_feeds_set_target($source, $entity, $target, $value) {
  // Remove hash from hex color value.
  $value = str_replace('#', '', $value);

  field_feeds_set_target_text($source, $entity, $target, $value);
  if (isset($entity->$target)) {
    $entity->{$target}['und'][0]['jquery_colorpicker'] = $entity->{$target}['und'][0]['value'];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * For providing 2 decimals after point in displaying price.
 */
function backoffice_extras_field_widget_commerce_price_full_form_alter(&$element, &$form_state, $context) {
  $element['amount']['#default_value'] = number_format($element['amount']['#default_value'], 2, '.', '');
}

/**
 * Implements hook_form_alter().
 *
 * For the exposed form.
 */
function backoffice_extras_form_views_exposed_form_alter(&$form, &$form_state) {
  // Workaround, because on a Ajax-Request
  // the url of the current panel page gets lost
  // and "/" is used instead.
  if (isset($form_state['view']->tag) && $form_state['view']->tag == 'dashboard') {
    global $_domain, $language;
    $suffix = !empty($_domain['suffix']['suffix']) ? '/' . $_domain['suffix']['suffix'] : '';
    $action = $suffix . '/' . $language->prefix . '/' . current_path();

    // Fix action URL.
    if ($form['#action'] != $action) {
      $form['#action'] = $action;
    }
  }
}

/**
 * Implements hook_permission().
 */
function backoffice_extras_permission() {
  return array(
    'edit user roles' => array(
      'title' => t('Edit user roles'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function backoffice_extras_form_user_register_form_alter(&$form, $form_state) {
  if (isset($form['account']) && isset($form['account']['roles']) && $form['account']['roles']['#options']) {
    $form['account']['roles']['#access'] = user_access('edit user roles');
  }
  if (user_is_logged_in()) {
    $form['#validate'][] = 'backoffice_extras_user_role_validate';
  }
}

/**
 * User role validate function callback.
 */
function backoffice_extras_user_role_validate(&$form, $form_state) {
  $role = user_role_load_by_name('sample_manager');
  $has_role = $form_state['values']['roles'][$role->rid];
  $countries_assigned = $form_state['values']['field_mouser_responsible_countri']['und'][0]['value'];

  if (!$has_role || !is_null($countries_assigned)) {
    return;
  }

  form_set_error('field_mouser_responsible_countri', t('For sample manager role, Mouser Responsable Country field should be selected.'));
}

/**
 * Implements hook_form_aler().
 */
function backoffice_extras_form_user_profile_form_alter(&$form, $form_state) {
  backoffice_extras_form_user_register_form_alter($form, $form_state);
}

/**
 * Taxonomy term form submit callback for "Save and Publish translation".
 */
function backoffice_extras_save_and_publish_taxonomy_submit($form, &$form_state) {
  $form_state['values']['translation']['status'] = 1;
  $form_state['values']['translation']['translate'] = 0;
  taxonomy_form_term_submit($form, $form_state);
}

/**
 * Taxonomy term form submit callback for "Unpublish translation".
 */
function backoffice_extras_unpublish_taxonomy_submit($form, $form_state) {
  $form_state['values']['translation']['status'] = 0;
  $form_state['values']['translation']['translate'] = 0;
  taxonomy_form_term_submit($form, $form_state);
}

/**
 * Commerce product form submit callback for "Save and Publish translation".
 */
function backoffice_extras_save_and_publish_commerce_product_submit($form, $form_state) {
  $form_state['values']['translation']['status'] = 1;
  $form_state['values']['translation']['translate'] = 0;
  commerce_product_product_form_submit($form, $form_state);
}

/**
 * Menu callback to process one time login link.
 *
 * Process one time login link and redirects to the user page on success.
 */
function backoffice_extras_user_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array(
        '%user' => $user->name,
        '!user_edit' => url("user/$user->uid/edit"),
      )));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array(
            '%other_user' => $user->name,
            '%resetting_user' => $reset_link_account->name,
            '!logout' => url('user/logout'),
          )));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto();
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)) {
        // First stage is a confirmation form, then login.
        if ($action == 'login') {
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array(
            '%name' => $account->name,
            '%timestamp' => $timestamp,
          ));
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
          // Let the user's password
          // be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;
          drupal_goto('user/' . $user->uid . '/edit-profile', array('query' => array('pass-reset-token' => $token)));
        }
        else {
          drupal_goto("user/reset/$uid/$timestamp/$hashed_pass/login");
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto();
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL
      // for the administrator to check.
      drupal_access_denied();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function backoffice_extras_form_comment_form_alter(&$form, &$form_state) {
  $form['actions']['save_and_publish'] = array(
    '#type' => 'submit',
    '#value' => t('Save and Publish'),
    '#weight' => 10,
    '#submit' => array('backoffice_extras_comment_admin_save_and_publish'),
  );
}

/**
 * Comment form submit callback for "Save and submit".
 */
function backoffice_extras_comment_admin_save_and_publish($form, &$form_state) {
  $form_state['values']['status'] = 1;
  comment_form_submit($form, $form_state);
}

/**
 * Access callback for creating nodes.
 *
 * Block access if not central domain.
 */
function _backoffice_extras_node_add_access($op = NULL, $type = NULL) {
  if (!souriau_common_is_central()) {
    return FALSE;
  }

  if (isset($op) && isset($type)) {
    return node_access($op, $type);
  }

  return _node_add_access();
}

/**
 * Access callback for commerce content.
 *
 * Block access if not central domain.
 */
function _backoffice_extras_commerce_add_access() {
  if (!souriau_common_is_central()) {
    return FALSE;
  }

  return commerce_product_ui_product_add_any_access();
}

/**
 * Helper to validate node singularity on node_edit_form.
 *
 * If we create new node check that there is no existed node of this type.
 * If we edit node - prevent delete action.
 *
 * @see _backoffice_extras_node_edit_form_alter()
 */
function _backoffice_extras_node_form_validate_node_singularity(&$form, $view_data = array()) {
  $node = $form['#node'];

  // If we create new node checking if already existed node of this type.
  if (!empty($node->nid)) {
    $form['actions']['delete']['#access'] = FALSE;
    return;
  }

  // Call views_get_view_result with possible view arguments.
  $view_data += array(
    'view' => 'souriau_query_get_singularity',
    'display' => 'master',
  );
  $params = array($view_data['view'], $view_data['display']);
  if ($view_data['view'] == 'souriau_query_get_singularity') {
    // Fist contextual filter.
    array_unshift($view_data, $node->type);
  }
  unset($view_data['view']);
  unset($view_data['display']);

  // Set extra contextual filters into params, if exist.
  if (!empty($view_data)) {
    $params = array_merge($params, $view_data);
  }

  $nids = call_user_func_array('views_get_view_result', $params);

  if (!empty($nids)) {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['save_and_publish']['#access'] = FALSE;
    drupal_set_message(t('A node of this type already existed.', array(), array('context' => SOURIAU_COMMON_T_ADMIN)));
  }
}
