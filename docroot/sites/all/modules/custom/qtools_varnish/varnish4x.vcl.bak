vcl 4.0;

backend default {
    .host = "192.168.22.135";
    .port = "80";
}

import std;

sub vcl_backend_response {

    /** Print VCL version */
    set beresp.http.X-ESI = bereq.http.X-ESI;

    /** Enable ESI if requested on this page */
    if (beresp.http.X-DOESI) {
      set beresp.do_esi = true;
    }

    /** Set desired TTL and Grace */
    set beresp.ttl = std.duration(beresp.http.X-TTL + "s", 0s);
    set beresp.grace = std.duration(beresp.http.X-GRACE + "s", 0s);

    /** Cache resources Only if success, otherwise you should manage this TTL with headers. */
    /*if (beresp.status == 200 && req.url ~ "(?i)\.(jpeg|jpg|png|gif|ico|swf|js|css|txt|eot|woff|ttf|htc|mp3|m4a|mp4|m4v|mov|mpeg|mpg|avi|divx|ogg|ogv|wma|pdf|tar|gz|gzip|bz2)(\?.*|)$") {
      unset beresp.http.set-cookie;
      set beresp.ttl = 1h;
    }*/

    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Cacheable = "NO:Cookie in the response";
        set beresp.ttl = 0s;
    }
    elsif (beresp.ttl <= 0s) {
        set beresp.http.X-Cacheable = "NO:Not Cacheable";
    }
    elsif ( beresp.http.Cache-Control ~ "private") {
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        set beresp.uncacheable = true;
        return(deliver);
    }
    else {
        set beresp.http.X-Cacheable = "YES";
    }

    /** Debug actual TTL */
    set beresp.http.X-TTL2 = beresp.ttl;

    return (deliver);
}

sub vcl_recv {

    /** Static resources have separate cache rules */
    /*if (req.url ~ "\.(jpeg|jpg|png|gif|ico|swf|js|css|txt|eot|woff|ttf|htc)(\?.*|)$") {
      unset req.http.Cookie;
      return (lookup);
    }*/

    /** Make backend aware of varnish. */
    set req.http.X-ESI = "4.01";

    /** This is maximum allowed graced, actual grace set in vcl_fetch.
    IS THIS STILL NEEDED? */
    /** set req.grace = 1h;*/

    /** Default routine */
    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }
    if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
    if (req.method != "GET" && req.method != "HEAD") {
        /* We only deal with GET and HEAD by default */
        /* If request contains fingerprint - we might want to cache it based on that fingerprint */
        if (req.method == "POST" && req.url ~ "^.*fingerprint-.*$") {
	  return (hash);
        }
        else {
	  return (pass);
	}
    }
    if (req.http.Authorization) {
        /* Not cacheable by default */
        return (pass);
    }
    return (hash);
}

sub vcl_hash {

    /** Default hash */
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }

    /** Place ajax into separate bin */
    if (req.http.X-Requested-With) {
        hash_data(req.http.X-Requested-With);
    }

    /** Place variants into separate bin */
    if (req.http.Cookie ~ "^.*?QTEVARIANT=([^;]*);*.*$") {
        set req.http.X-VARIANT = regsub(req.http.Cookie, "^.*?QTEVARIANT=([^;]*);*.*$", "\1");
        hash_data(req.http.X-VARIANT);
    }

    /** Process authenticated users */
    if (req.http.Cookie ~ "^.*?SESS[^=]*=([^;]{5});*.*$") {

        /** Extract full session value */
        set req.http.X-SESS = regsub(req.http.Cookie, "^.*?SESS([^;]*);*.*$", "\1");

        /** Extract bin headers */
        if (req.http.Cookie ~ "^.*?QTEBIN=([^;]*);*.*$") {
            /* Set default mode to per role */
            set req.http.X-BIN  = "role:" + regsub(req.http.Cookie, "^.*?QTEBIN=([^;]*);*.*$", "\1");
        }

        /** DRUPAL_CACHE_PER_ROLE */
        /** Do nothing this is default */
        /** if (req.url ~ "^.*cachemode=1.*$") {
        }*/

        /** DRUPAL_CACHE_PER_PAGE */
        if (req.url ~ "^.*cachemode=4.*$" && req.http.X-BIN) {
            /** Set bin to constant */
            set req.http.X-BIN = "page:" + regsub(req.http.X-BIN, "^.*-([^-]*)$", "\1");
        }

        /** DRUPAL_CACHE_PER_USER */
        if (req.url ~ "^.*cachemode=2.*$" || !req.http.X-BIN) {
            /** Set user session as bin */
            set req.http.X-BIN  = "user:" + req.http.X-SESS;
        }

    }
    else {
	      set req.http.X-BIN = "anonymous";
    }

    /** If Bin is set - add it to hash data for this page */
    if (req.http.X-BIN) {
        hash_data(req.http.X-BIN);
    }

    return (lookup);
}

sub vcl_hit {

    /** Debug */
    set req.http.X-Cache-TTL = obj.ttl;
    return (deliver);
}

sub vcl_deliver {

    /** Replace cdn-no-store with no-store*/
    if (resp.http.Cache-Control ~ "cdn-no-store") {
        set resp.http.Cache-Control = regsub(resp.http.Cache-Control, "cdn-no-store", "no-store");
    }

    /** Debug */
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    }
    else {
        set resp.http.X-Cache = "MISS";
    }

    if (req.http.X-Cache-TTL) {
        set resp.http.X-Cache-TTL = req.http.X-Cache-TTL;
        unset req.http.X-Cache-TTL;
    }

    if (req.http.X-BIN) {
        set resp.http.X-BIN = req.http.X-BIN;
    }
    if (req.http.X-VARIANT) {
        set resp.http.X-VARIANT = req.http.X-VARIANT;
    }

    /** Unset unused headers */
    unset resp.http.Server;
    unset resp.http.X-Powered-By;
    unset resp.http.Expires;
    unset resp.http.Last-Modified;
    unset resp.http.Content-Language;
    unset resp.http.Link;
    unset resp.http.X-Generator;
    unset resp.http.Vary;
    unset resp.http.Via;
    unset resp.http.Connection;
    unset resp.http.Date;
    unset resp.http.X-Varnish;
    unset resp.http.X-Cache-TTL;

    /** Unset tags header if not in debug */
    if (!resp.http.X-CACHE-DEBUG) {
        unset resp.http.X-BIN;
        unset resp.http.X-VARIANT;
        unset resp.http.X-TAG;
        unset resp.http.X-TTL2;
        unset resp.http.X-RNDPAGE;
        unset resp.http.X-RNDGOTO;
    }

    return (deliver);
}
