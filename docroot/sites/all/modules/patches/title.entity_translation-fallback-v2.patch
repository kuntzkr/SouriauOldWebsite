diff --git a/CHANGELOG.txt b/CHANGELOG.txt
old mode 100644
new mode 100755
diff --git a/MAINTAINERS.txt b/MAINTAINERS.txt
old mode 100644
new mode 100755
diff --git a/README.txt b/README.txt
old mode 100644
new mode 100755
diff --git a/tests/title.test b/tests/title.test
old mode 100644
new mode 100755
diff --git a/tests/title_test.info b/tests/title_test.info
old mode 100644
new mode 100755
diff --git a/tests/title_test.install b/tests/title_test.install
old mode 100644
new mode 100755
diff --git a/tests/title_test.module b/tests/title_test.module
old mode 100644
new mode 100755
diff --git a/title.admin.inc b/title.admin.inc
old mode 100644
new mode 100755
index 380cabe..9cb0065
--- a/title.admin.inc
+++ b/title.admin.inc
@@ -14,16 +14,20 @@ function title_form_field_ui_overview(&$form, &$form_state) {
   if (!empty($entity_info['field replacement'])) {
     $field_replacement_info = $entity_info['field replacement'];
     $admin_path = _field_ui_bundle_admin_path($form['#entity_type'], $form['#bundle']);
+    $form['fields']['#header'][6]['colspan'] += 1;
 
     foreach (element_children($form['fields']) as $field_name) {
       if (isset($field_replacement_info[$field_name])) {
-        $form['fields'][$field_name]['delete'] = array(
+        $form['fields'][$field_name]['field_replacement'] = array(
           '#type' => 'link',
           '#title' => t('replace'),
           '#href' => $admin_path . '/fields/replace/' . $field_name,
           '#options' => array('attributes' => array('title' => t('Replace %field with a customizable field instance that can be translated.', array('%field' => $field_name)))),
         );
       }
+      else {
+        $form['fields'][$field_name]['field_replacement'] = array();
+      }
     }
   }
 }
diff --git a/title.api.php b/title.api.php
old mode 100644
new mode 100755
diff --git a/title.core.inc b/title.core.inc
old mode 100644
new mode 100755
diff --git a/title.field.inc b/title.field.inc
old mode 100644
new mode 100755
diff --git a/title.info b/title.info
old mode 100644
new mode 100755
diff --git a/title.install b/title.install
old mode 100644
new mode 100755
diff --git a/title.module b/title.module
old mode 100644
new mode 100755
index 2342f81..0c15d4f
--- a/title.module
+++ b/title.module
@@ -107,7 +107,7 @@ function title_field_replacement_info($entity_type, $legacy_field = NULL) {
 /**
  * Implements callback_entity_info_label().
  */
-function title_entity_label($entity, $type, $langcode = NULL) {
+function title_entity_label($entity, $type, $langcode = NULL, $orig_prefix = '(orig)') {
   $entity_info = entity_get_info($type);
   $legacy_field = $entity_info['entity keys']['label'];
   $info = $entity_info['field replacement'][$legacy_field];
@@ -117,6 +117,9 @@ function title_entity_label($entity, $type, $langcode = NULL) {
   if (title_field_replacement_enabled($type, $bundle, $legacy_field)) {
     $langcode = field_language($type, $entity, $info['field']['field_name'], $langcode);
     $values = $info['callbacks']['sync_get']($type, $entity, $legacy_field, $info, $langcode);
+    if (empty($values[$legacy_field])) {
+      return $orig_prefix . $entity->{$legacy_field . '_original'};
+    }
     return $values[$legacy_field];
   }
   // Otherwise if we have a fallback defined we use the original label callback.
@@ -140,8 +143,9 @@ function title_entity_presave($entity, $entity_type) {
   // need to synchronize the legacy field values into the replacing field
   // translations in the active language.
   if (module_invoke('entity_translation', 'enabled', $entity_type)) {
-    $langcode = title_active_language();
-    $translations = entity_translation_get_handler($entity_type, $entity)->getTranslations();
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $langcode = $handler->getFormLanguage();
+    $translations = $handler->getTranslations();
     // If we are removing a translation for the active language we need to skip
     // reverse synchronization, as we would store empty values in the original
     // replacing fields immediately afterwards.
@@ -193,10 +197,7 @@ function title_field_attach_update($entity_type, $entity) {
  * @see title_entity_load()
  */
 function title_field_attach_load($entity_type, $entities, $age, $options) {
-  // Allow values to re-sync when field_attach_load_revision() is called.
-  if ($age == FIELD_LOAD_REVISION) {
-    title_entity_sync_static_reset($entity_type, array_keys($entities));
-  }
+  // @todo: Do we need to handle revisions here?
   title_entity_load($entities, $entity_type);
 }
 
@@ -208,9 +209,6 @@ function title_field_attach_load($entity_type, $entities, $age, $options) {
  * replaced fields.
  */
 function title_entity_load($entities, $type) {
-  // Load entity translations otherwise field language will not be computed
-  // correctly.
-  module_invoke('entity_translation', 'entity_load', $entities, $type);
   foreach ($entities as &$entity) {
     // Synchronize values from the regular field unless we are intializing it.
     title_entity_sync($type, $entity, NULL, !empty($GLOBALS['title_field_replacement_init']));
@@ -230,10 +228,20 @@ function title_entitycache_load($entities, $type) {
 /**
  * Implements hook_entitycache_reset().
  *
- * When the entity cache is reset the field sync has to be done again.
+ * If the entity cache is reseted the field sync has to be done again.
  */
 function title_entitycache_reset($ids, $entity_type) {
-  title_entity_sync_static_reset($entity_type, $ids);
+  $sync = &drupal_static('title_entity_sync', array());
+  if (!empty($ids)) {
+    // Clear specific ids.
+    foreach ($ids as $id) {
+      unset($sync[$entity_type][$id]);
+    }
+  }
+  elseif (!empty($sync[$entity_type])) {
+    // Reset cache for an entity_type.
+    $sync[$entity_type] = array();
+  }
 }
 
 /**
@@ -264,9 +272,7 @@ function title_entity_prepare_view($entities, $type, $langcode) {
  */
 function title_field_replacement_enabled($entity_type, $bundle, $legacy_field) {
   $info = title_field_replacement_info($entity_type, $legacy_field);
-  if (!empty($info['field']['field_name'])) {
-    $instance = field_info_instance($entity_type, $info['field']['field_name'], $bundle);
-  }
+  $instance = field_info_instance($entity_type, $info['field']['field_name'], $bundle);
   return !empty($instance);
 }
 
@@ -437,26 +443,6 @@ function title_entity_sync($entity_type, &$entity, $langcode = NULL, $set = FALS
 }
 
 /**
- * Reset the list of entities whose fields have already been synchronized.
- *
- * @param $entity_type
- *   The name of the entity type.
- * @param $entity_ids
- *   Either an array of entity IDs to reset or NULL to reset all.
- */
-function title_entity_sync_static_reset($entity_type, $entity_ids = NULL) {
-  $sync = &drupal_static('title_entity_sync', array());
-  if (is_array($entity_ids)) {
-    foreach ($entity_ids as $id) {
-      unset($sync[$entity_type][$id]);
-    }
-  }
-  else {
-    unset($sync[$entity_type]);
-  }
-}
-
-/**
  * Synchronize a single legacy field with its regular field value.
  *
  * @param $entity_type
@@ -480,14 +466,8 @@ function title_field_sync_get($entity_type, $entity, $legacy_field, $info, $lang
     $langcode = field_language($entity_type, $entity, $info['field']['field_name'], $langcode);
     $values = $info['callbacks']['sync_get']($entity_type, $entity, $legacy_field, $info, $langcode);
     foreach ($values as $name => $value) {
-      if ($value !== NULL) {
-        $entity->{$name} = $value;
-      }
+      $entity->{$name} = $value;
     }
-    // Ensure we do not pollute field language static cache.
-    $cache = &drupal_static('field_language');
-    list($id, ,) = entity_extract_ids($entity_type, $entity);
-    unset($cache[$entity_type][$id]);
   }
 }
 
@@ -584,10 +564,6 @@ function title_field_attach_form($entity_type, $entity, &$form, &$form_state, $l
           $form[$info['field']['field_name']]['#access'] = $form[$legacy_field]['#access'];
         }
 
-        // Add class from legacy field so behaviors can still be applied on
-        // title widget.
-        $form[$info['field']['field_name']]['#attributes']['class'] = array('form-item-' . $legacy_field);
-
         // Restrict access to the legacy field form element and mark it as
         // replaced.
         $form[$legacy_field]['#access'] = FALSE;
@@ -957,38 +933,3 @@ function title_field_attach_create_bundle($entity_type, $bundle) {
     }
   }
 }
-
-/**
- * Implements hook_field_info_alter().
- */
-function title_field_info_alter(&$info) {
-  $supported_types = array('taxonomy_term_reference' => TRUE);
-  foreach ($info as $field_type => &$field_type_info) {
-    if (isset($supported_types[$field_type])) {
-      if (!isset($field_type_info['settings'])) {
-        $field_type_info['settings'] = array();
-      }
-      $field_type_info['settings'] += array('options_list_callback' => 'title_taxonomy_allowed_values');
-    }
-  }
-}
-
-/**
- * Return taxonomy term values for taxonomy reference fields.
- */
-function title_taxonomy_allowed_values($field) {
-  $bundle = !empty($field['settings']['allowed_values'][0]['vocabulary']) ? $field['settings']['allowed_values'][0]['vocabulary'] : NULL;
-  if ($bundle && ($label = title_field_replacement_get_label_field('taxonomy_term', $bundle))) {
-    $options = array();
-    foreach ($field['settings']['allowed_values'] as $tree) {
-      $vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary']);
-      if ($vocabulary && ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'], NULL, TRUE))) {
-        foreach ($terms as $term) {
-          $options[$term->tid] = str_repeat('-', $term->depth) . entity_label('taxonomy_term', $term);
-        }
-      }
-    }
-    return $options;
-  }
-  return taxonomy_allowed_values($field);
-}
diff --git a/views/title.views.inc b/views/title.views.inc
old mode 100644
new mode 100755
diff --git a/views/views_handler_title_field.inc b/views/views_handler_title_field.inc
old mode 100644
new mode 100755
